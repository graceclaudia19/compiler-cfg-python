/* Main Algo States , Expressions */
MAIN_STATES -> MAIN_STATES MAIN_STATES | DECLARATION | DECLARATION_WITH_OP | IMPORT_ALGO | IF_STATES | IF_STATES ELSE_STATES | IF_STATES ELIF_STATES | WHILE_CONTENT | FOR_ALGO | DEF_STATES | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES | CLASS_STATES | WORD PERIOD WORD PARAMETER_STATES
IMPORT_ALGO -> FROM WORD IMPORT WORD AS WORD | IMPORT WORD AS WORD | FROM WORD IMPORT WORD | IMPORT WORD
EXPRESSION -> FLOAT | WORD | NUM | MINUS NUM | MINUS FLOAT | REGULAR_OPEN EXPRESSION REGULAR_CLOSE | EXPRESSION ARITHMATIC EXPRESSION | LEN REGULAR_OPEN WORD REGULAR_CLOSE | LEN REGULAR_OPEN WORD REGULAR_CLOSE EXPRESSION | WORD PERIOD WORD | NONE | EXPRESSION COMPARISON EXPRESSION | EXPRESSION LOGICAL EXPRESSION

/* Base Conditional States + Algorithm */
CONDITION -> REGULAR_OPEN CONDITION REGULAR_CLOSE | CONDITION LOGICAL CONDITION | EXPRESSION COMPARISON EXPRESSION | NOT CONDITION | WORD | BOOLEAN
IF_STATES -> IF_ALGO | IF_ALGO ELSE_STATES | IF_ALGO ELIF_STATES
IF_ALGO -> IF CONDITION COLON MAIN_STATES | IF CONDITION COLON RAISE_STATES
ELIF_STATES -> ELIF_ALGO | ELIF_ALGO ELSE_STATES | ELIF_ALGO ELIF_STATES
ELIF_ALGO -> ELIF CONDITION COLON MAIN_STATES | ELIF CONDITION COLON RAISE_STATES
ELSE_STATES -> ELSE COLON MAIN_STATES | ELSE COLON RAISE_STATES | ELSE IF_STATES

/* Looping State + Algorithm (While) */
WHILE_CONTENT -> WHILE CONDITION COLON ALGO_IN_LOOP | WHILE BOOLEAN COLON ALGO_IN_LOOP | WHILE REGULAR_OPEN BOOLEAN REGULAR_CLOSE COLON ALGO_IN_LOOP
FOR_ALGO -> FOR FOR_STATES COLON ALGO_IN_LOOP
FOR_STATES -> FOR_END | FOR_START_END | FOR_START_END_JUMP | FOR_MEMBER

/* For looping Cases */
FOR_END -> WORD IN RANGE REGULAR_OPEN EXPRESSION REGULAR_CLOSE
FOR_START_END -> WORD IN RANGE REGULAR_OPEN EXPRESSION COMMA EXPRESSION REGULAR_CLOSE
FOR_START_END_JUMP -> WORD IN RANGE REGULAR_OPEN EXPRESSION COMMA EXPRESSION COMMA EXPRESSION REGULAR_CLOSE
FOR_MEMBER -> WORD IN WORD

/* Not Yet */
ALGO_IN_LOOP -> ALGO_IN_LOOP ALGO_IN_LOOP | BREAK | CONTINUE | DECLARATION | DECLARATION_WITH_OP | IF_STATES_IN_LOOP | IF_STATES_IN_LOOP ELSE_STATES_IN_LOOP | IF_STATES_IN_LOOP ELIF_STATES_IN_LOOP | WHILE_CONTENT | FOR_ALGO | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES
IF_STATES_IN_LOOP -> IF_ALGO_IN_LOOP | IF_ALGO_IN_LOOP ELSE_STATES_IN_LOOP | IF_ALGO_IN_LOOP ELIF_STATES_IN_LOOP
IF_ALGO_IN_LOOP -> IF CONDITION COLON ALGO_IN_LOOP | IF CONDITION COLON RAISE_STATES
ELIF_STATES_IN_LOOP -> ELIF_ALGO_IN_LOOP | ELIF_ALGO_IN_LOOP ELSE_STATES_IN_LOOP | ELIF_ALGO_IN_LOOP ELIF_STATES_IN_LOOP
ELIF_ALGO_IN_LOOP -> ELIF CONDITION COLON ALGO_IN_LOOP | ELIF CONDITION COLON RAISE_STATES
ELSE_STATES_IN_LOOP -> ELSE COLON ALGO_IN_LOOP | ELSE IF_STATES_IN_LOOP | ELSE COLON RAISE_STATES

/* Function Definition and States */
DEF_STATES -> DEF WORD PARAMETER_STATES COLON DEF_ALGO | DEF WORD PARAMETER_STATES COLON DEF_RETURN | DEF WORD PARAMETER_STATES COLON PRINT_STATES | DEF WORD PARAMETER_STATES COLON RAISE_STATES
DEF_ALGO -> DEF_ALGO DEF_ALGO | DECLARATION | DECLARATION_WITH_OP | IF_STATES_DEF | IF_STATES_DEF ELSE_STATES_DEF | IF_STATES_DEF ELIF_STATES_DEF | WHILE_CONTENT | FOR_ALGO | DEF_STATES | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES | CLASS_STATES
DEF_RETURN -> DEF_ALGO RETURN_STATES | RETURN_STATES


IF_STATES_DEF -> IF_ALGO_DEF | IF_ALGO_DEF ELSE_STATES_DEF | IF_ALGO_DEF ELIF_STATES_DEF
IF_ALGO_DEF -> IF CONDITION COLON DEF_ALGO | IF CONDITION COLON DEF_RETURN | IF CONDITION COLON RAISE_STATES
ELIF_STATES_DEF -> ELIF_ALGO_DEF | ELIF_ALGO_DEF ELSE_STATES_DEF | ELIF_ALGO_DEF ELIF_STATES_DEF
ELIF_ALGO_DEF -> ELIF CONDITION COLON DEF_ALGO | ELIF CONDITION COLON DEF_RETURN | ELIF CONDITION COLON RAISE_STATES
ELSE_STATES_DEF -> ELSE COLON DEF_ALGO | ELSE COLON DEF_RETURN | ELSE IF_STATES_DEF | ELSE COLON RAISE_STATES
PARAMETER_STATES -> REGULAR_OPEN PARAMETER REGULAR_CLOSE | REGULAR_OPEN REGULAR_CLOSE
PARAMETER -> WORD | WORD COMMA PARAMETER | WORD EQ STRING COMMA PARAMETER | WORD EQ STRING | WORD EQ WORD COMMA PARAMETER | WORD EQ WORD | REGULAR_OPEN SELF REGULAR_CLOSE
OPERATOR -> INPUT REGULAR_OPEN WORD REGULAR_CLOSE | OUTPUT REGULAR_OPEN WORD REGULAR_CLOSE | WORD EQ EXPRESSION
RETURN_STATES -> RETURN RETURN_PARAMETER
RETURN_PARAMETER -> WORD | WORD COMMA RETURN_PARAMETER
CLASS_STATES -> CLASS WORD COLON ALGO_CLASS
ALGO_CLASS -> ALGO_CLASS ALGO_CLASS | DECLARATION | DECLARATION_WITH_OP | IMPORT_ALGO | IF_ALGO | IF_ALGO ELSE_STATES | IF_ALGO ELIF_STATES | WHILE_CONTENT | FOR_ALGO | DEF_STATES_CLASS | WITH_STATES | DEF_STATES| WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES
DEF_STATES_CLASS -> DEF WORD REGULAR_OPEN SELF COMMA PARAMETER REGULAR_CLOSE ALGO | DEF WORD REGULAR_OPEN SELF COMMA PARAMETER REGULAR_CLOSE DEF_RETURN

/* List States and Declaration */
LIST_DECLARATION -> SQUARE_OPEN LIST_ELEMENTS SQUARE_CLOSE | SQUARE_OPEN SQUARE_CLOSE | SQUARE_OPEN WORD FOR FOR_STATES SQUARE_CLOSE
LIST_ELEMENTS -> LIST_DECLARATION | LIST_DECLARATION COMMA LIST_ELEMENTS | EXPRESSION | EXPRESSION COMMA LIST_ELEMENTS | NUM | NUM COMMA LIST_ELEMENTS | STRING | STRING COMMA LIST_ELEMENTS

/* Data Types Declaration */
STRING -> SINGLE_QUOTE LONG_WORD SINGLE_QUOTE | DOUBLE_QUOTE LONG_WORD DOUBLE_QUOTE
LONG_WORD -> WORD | WORD LONG_WORD
DECLARATION -> WORD EQ EXPRESSION | WORD EQ STRING | WORD EQ LIST_DECLARATION 
DECLARATION_WITH_OP -> WORD ASSIGN_OP EXPRESSION

/* File Processing */
WITH_STATES -> WITH OPEN REGULAR_OPEN STRING COMMA STRING REGULAR_CLOSE AS WORD COLON ALGO | WITH OPEN REGULAR_OPEN WORD COMMA STRING REGULAR_CLOSE AS WORD COLON ALGO
WRITE_ALGO -> WORD PERIOD WRITE REGULAR_OPEN STRING REGULAR_CLOSE | WORD PERIOD WRITE REGULAR_OPEN EXPRESSION REGULAR_CLOSE | WORD PERIOD WRITE REGULAR_OPEN WORD REGULAR_CLOSE
PARENTHESES_WORD -> SINGLE_QUOTE WORD SINGLE_QUOTE | DOUBLE_QUOTE WORD DOUBLE_QUOTE
RAISE_STATES -> RAISE ERROR REGULAR_OPEN STRING REGULAR_CLOSE

/* Number Types */
FLOAT -> NUM PERIOD NUM
/* SCIENTIFIC -> NUM E NUM | NUM e NUM */

/* Operators */
ARITHMATIC -> + | - | * | / | % | **
LOGICAL -> and | or
COMPARISON -> GREATER_THAN | LESS_THAN | GREATER_THAN EQ | LESS_THAN EQ | EQ EQ | EXCLAMATION EQ
ASSIGN_OP -> PLUS EQ | MINUS EQ | MULTIPLY EQ | DIVIDE EQ | EQ

/* Commenting n Printing */
SENTENCE -> WORD | WORD SENTENCE
COMMENT -> TAG SENTENCE | COMMENT_QUOTATION QUOTATION_COMMENT_SENTENCE COMMENT_QUOTATION
COMMENT_QUOTATION -> SINGLE_QUOTE SINGLE_QUOTE SINGLE_QUOTE | DOUBLE_QUOTE DOUBLE_QUOTE DOUBLE_QUOTE
QUOTATION_COMMENT_SENTENCE -> SENTENCE | SENTENCE QUOTATION_COMMENT_SENTENCE
PRINT_STATES -> PRINT REGULAR_OPEN STRING REGULAR_CLOSE | PRINT REGULAR_OPEN WORD REGULAR_CLOSE | PRINT REGULAR_OPEN EXPRESSION REGULAR_CLOSE | PRINT REGULAR_OPEN REGULAR_CLOSE | PRINT REGULAR_OPEN LIST_DECLARATION REGULAR_CLOSE

/* Terminal and Non-terminal statement + symbols */
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVIDE -> /
MODULO -> %
POWER -> MULTIPLY MULTIPLY
IF -> if
ELSE -> else
ELIF -> elif
WHILE -> while
FOR -> for
WORD -> word
NUM -> num
INPUT -> input
COLON -> :
COMMA -> ,
PERIOD -> .
SQUARE_OPEN -> [
SQUARE_CLOSE -> ]
REGULAR_OPEN -> (
REGULAR_CLOSE -> )
CURLY_OPEN -> {
CURLY_CLOSE -> }
EQ -> =
GREATER_THAN -> >
LESS_THAN -> <
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
TAG -> #
PRINT -> print
EXCLAMATION -> !
LEN -> len
APPEND -> append
WRITE -> write
RANGE -> range
SELF -> self
IMPORT -> import
FROM -> from
AS -> as
BOOLEAN -> True | False
DEF -> def
NONE -> None
WITH -> with
OPEN -> open
READ -> read
READLINES -> readlines
RETURN -> return
CONTINUE -> continue
BREAK -> break
PASS -> pass
RAISE -> raise
ERROR -> IOERROR | ValueError | ZeroDivisionError | ImportError | NameError | TypeError
IN -> in
CLASS -> class
IS -> is