/* Main Algo States , Expressions */
MAIN_STATES -> MAIN_STATES MAIN_STATES | DECLARATION | DECLARATION_WITH_OP | IMPORT_ALGO | IF_STATES | IF_ONE_LINER_ALGO | IF_STATES ELSE_STATES | IF_STATES ELIF_STATES | WHILE_STATES | FOR_ALGO | DEF_STATES | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES | CLASS_STATES | WORD PERIOD FUNCTION_STATES | FUNCTION_STATES
IMPORT_ALGO -> FROM WORD IMPORT WORD AS WORD | IMPORT WORD AS WORD | FROM WORD IMPORT WORD | IMPORT WORD
EXPRESSION -> BOOLEAN | FLOAT | WORD | NUM | MINUS NUM | MINUS FLOAT | REGULAR_OPEN EXPRESSION REGULAR_CLOSE | EXPRESSION ARITHMATIC EXPRESSION | LEN REGULAR_OPEN WORD REGULAR_CLOSE | LEN REGULAR_OPEN WORD REGULAR_CLOSE EXPRESSION | WORD PERIOD WORD | WORD PERIOD EXPRESSION | NONE | EXPRESSION COMPARISON EXPRESSION | EXPRESSION LOGICAL EXPRESSION | INDEXED_VAR | FUNCTION_STATES | IN_STATES | IS_STATES | PRIMITIVE | NOT EXPRESSION
INDEXED_VAR -> WORD SQUARE_OPEN LIST_INDEX_TYPE SQUARE_CLOSE | WORD SQUARE_OPEN KEY_TYPE SQUARE_CLOSE | STRING SQUARE_OPEN LIST_INDEX_TYPE SQUARE_CLOSE | LIST_DECLARATION SQUARE_OPEN LIST_INDEX_TYPE SQUARE_CLOSE | TUPLE_DECLARATION SQUARE_OPEN LIST_INDEX_TYPE SQUARE_CLOSE
IN_STATES -> WORD INS WORD | WORD INS STRING | STRING INS WORD | NUMBER_TYPES INS GROUP_DECLARATION | WORD INS GROUP_DECLARATION | GROUP_DECLARATION INS WORD | GROUP_DECLARATION INS GROUP_DECLARATION | IN_STATES INS STRING | IN_STATES INS GROUP_DECLARATION | IN_STATES INS WORD
IS_STATES -> WORD ISS WORD | WORD ISS STRING | STRING ISS WORD | NUMBER_TYPES ISS GROUP_DECLARATION | WORD ISS GROUP_DECLARATION | GROUP_DECLARATION ISS WORD | GROUP_DECLARATION ISS GROUP_DECLARATION | IS_STATES ISS STRING | IS_STATES ISS GROUP_DECLARATION | IS_STATES ISS WORD | EXPRESSION ISS EXPRESSION | IS_STATES ISS EXPRESSION
INS -> IN | NOT IN
ISS -> IS | IS NOT
PRIMITIVE -> BOOLEAN | FLOAT | WORD | STRING | NUM | MINUS NUM | MINUS FLOAT | NOT PRIMITIVE
LIST_INDEX_TYPE -> NUM | NUM COLON NUM | NUM COLON | COLON NUM | MINUS NUM COLON MINUS NUM | MINUS NUM COLON | COLON MINUS NUM
KEY_TYPE -> EXPRESSION

/* Conditional States + Algorithm */
CONDITION -> REGULAR_OPEN CONDITION REGULAR_CLOSE | CONDITION LOGICAL CONDITION | CONDITION COMPARISON CONDITION | NOT CONDITION | EXPRESSION | EXPRESSION INS EXPRESSION
IF_STATES -> IF_ALGO | IF_ALGO ELSE_STATES | IF_ALGO ELIF_STATES
IF_ALGO -> IF CONDITION COLON MAIN_STATES | IF CONDITION COLON ERROR_STATES
IF_ONE_LINER_ALGO -> ONELINER_PARAM IF CONDITION ELSE ONELINER_PARAM | ONELINER_PARAM IF CONDITION ELSE ONELINER_PARAM IF_ONE_LINER_ALGO
ONELINER_PARAM -> PRINT_STATES | NONE | NUMBER_TYPES | BOOLEAN | STRING | WORD
ELIF_STATES -> ELIF_ALGO | ELIF_ALGO ELSE_STATES | ELIF_ALGO ELIF_STATES
ELIF_ALGO -> ELIF CONDITION COLON MAIN_STATES | ELIF CONDITION COLON ERROR_STATES
ELSE_STATES -> ELSE COLON MAIN_STATES | ELSE COLON ERROR_STATES

/* Looping State + Algorithm (While and For) */
WHILE_STATES -> WHILE CONDITION COLON MAIN_STATES_LOOP | WHILE CONDITION COLON MAIN_STATES_LOOP ELSE_STATES
FOR_ALGO -> FOR FOR_STATES COLON MAIN_STATES_LOOP
FOR_STATES -> FOR_END | FOR_START_END | FOR_START_END_JUMP | FOR_MEMBER

/* For looping Cases */
FOR_END -> WORD IN RANGE REGULAR_OPEN EXPRESSION REGULAR_CLOSE
FOR_START_END -> WORD IN RANGE REGULAR_OPEN EXPRESSION COMMA EXPRESSION REGULAR_CLOSE
FOR_START_END_JUMP -> WORD IN RANGE REGULAR_OPEN EXPRESSION COMMA EXPRESSION COMMA EXPRESSION REGULAR_CLOSE
FOR_MEMBER -> KEY_MEMBER IN WORD | KEY_MEMBER IN STRING | KEY_MEMBER IN GROUP_DECLARATION | KEY_MEMBER IN FUNCTION_STATES
KEY_MEMBER -> WORD | WORD COMMA KEY_MEMBER

/* Looping Algo States */
MAIN_STATES_LOOP -> MAIN_STATES_LOOP MAIN_STATES_LOOP | BREAK | CONTINUE | DECLARATION | DECLARATION_WITH_OP | IF_STATES_LOOP | IF_STATES_LOOP ELSE_STATES_LOOP | IF_STATES_LOOP ELIF_STATES_LOOP | WHILE_STATES | FOR_ALGO | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES
IF_STATES_LOOP -> IF_ALGO_LOOP | IF_ALGO_LOOP ELSE_STATES_LOOP | IF_ALGO_LOOP ELIF_STATES_LOOP
IF_ALGO_LOOP -> IF CONDITION COLON MAIN_STATES_LOOP | IF CONDITION COLON ERROR_STATES
ELIF_STATES_LOOP -> ELIF_ALGO_LOOP | ELIF_ALGO_LOOP ELSE_STATES_LOOP | ELIF_ALGO_LOOP ELIF_STATES_LOOP
ELIF_ALGO_LOOP -> ELIF CONDITION COLON MAIN_STATES_LOOP | ELIF CONDITION COLON ERROR_STATES
ELSE_STATES_LOOP -> ELSE COLON MAIN_STATES_LOOP | ELSE COLON ERROR_STATES

/* Function Definition and States */
DEF_STATES -> DEF WORD PARAMETER_STATES COLON DEF_ALGO | DEF WORD PARAMETER_STATES COLON DEF_RETURN | DEF WORD PARAMETER_STATES COLON PRINT_STATES | DEF WORD PARAMETER_STATES COLON ERROR_STATES
DEF_ALGO -> DEF_ALGO DEF_ALGO | DECLARATION | DECLARATION_WITH_OP | IF_STATES_FUNC | IF_STATES_FUNC ELSE_STATES_FUNC | IF_STATES_FUNC ELIF_STATES_FUNC | WHILE_STATES | FOR_ALGO | DEF_STATES | WITH_STATES | WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES | CLASS_STATES
DEF_RETURN -> DEF_ALGO RETURN_STATES | RETURN_STATES
FUNCTION_STATES -> WORD PARAMETER_STATES

/* Function Algo States */
IF_STATES_FUNC -> IF_ALGO_FUNC | IF_ALGO_FUNC ELSE_STATES_FUNC | IF_ALGO_FUNC ELIF_STATES_FUNC
IF_ALGO_FUNC -> IF CONDITION COLON DEF_ALGO | IF CONDITION COLON DEF_RETURN | IF CONDITION COLON ERROR_STATES
ELIF_STATES_FUNC -> ELIF_ALGO_FUNC | ELIF_ALGO_FUNC ELSE_STATES_FUNC | ELIF_ALGO_FUNC ELIF_STATES_FUNC
ELIF_ALGO_FUNC -> ELIF CONDITION COLON DEF_ALGO | ELIF CONDITION COLON DEF_RETURN | ELIF CONDITION COLON ERROR_STATES
ELSE_STATES_FUNC -> ELSE COLON DEF_ALGO | ELSE COLON DEF_RETURN | ELSE COLON ERROR_STATES
PARAMETER_STATES -> REGULAR_OPEN PARAMETER REGULAR_CLOSE | REGULAR_OPEN REGULAR_CLOSE
PARAMETER -> WORD | WORD COMMA PARAMETER | WORD EQ STRING COMMA PARAMETER | WORD EQ STRING | WORD EQ WORD COMMA PARAMETER | WORD EQ WORD | REGULAR_OPEN SELF REGULAR_CLOSE | EXPRESSION | GROUP_DECLARATION

/* Input + Return States */
OPERATOR -> INPUT REGULAR_OPEN WORD REGULAR_CLOSE | INPUT REGULAR_OPEN STRING REGULAR_CLOSE | WORD EQ OPERATOR | INDEXED_VAR EQ OPERATOR
RETURN_STATES -> RETURN RETURN_PARAMETER | RETURN
RETURN_PARAMETER -> NUM | FLOAT | NONE | WORD | STRING | WORD COMMA RETURN_PARAMETER | EXPRESSION | EXPRESSION COMMA EXPRESSION

/* OOP s */
CLASS_STATES -> CLASS WORD COLON ALGO_CLASS | CLASS FUNCTION_STATES COLON ALGO_CLASS
ALGO_CLASS -> ALGO_CLASS ALGO_CLASS | DECLARATION | DECLARATION_WITH_OP | IMPORT_ALGO | IF_ALGO | IF_ALGO ELSE_STATES | IF_ALGO ELIF_STATES | WHILE_STATES | FOR_ALGO | DEF_STATES_CLASS | WITH_STATES | DEF_STATES| WRITE_ALGO | PASS | WORD PERIOD APPEND REGULAR_OPEN WORD REGULAR_CLOSE | OPERATOR | PRINT_STATES
DEF_STATES_CLASS -> DEF WORD REGULAR_OPEN SELF COMMA PARAMETER REGULAR_CLOSE ALGO | DEF WORD REGULAR_OPEN SELF COMMA PARAMETER REGULAR_CLOSE DEF_RETURN

/* List States and Declaration */
LIST_DECLARATION -> SQUARE_OPEN LIST_ELEMENTS SQUARE_CLOSE | SQUARE_OPEN SQUARE_CLOSE | SQUARE_OPEN WORD FOR FOR_STATES SQUARE_CLOSE
LIST_ELEMENTS -> GROUP_DECLARATION | GROUP_DECLARATION COMMA LIST_ELEMENTS | EXPRESSION | EXPRESSION COMMA LIST_ELEMENTS | EXPRESSION COMMA | GROUP_DECLARATION COMMA

/* Tuple States and Declaration */
TUPLE_DECLARATION -> REGULAR_OPEN TUPLE_ELEMENTS REGULAR_CLOSE | REGULAR_OPEN REGULAR_CLOSE
TUPLE_ELEMENTS -> GROUP_DECLARATION | GROUP_DECLARATION COMMA | GROUP_DECLARATION COMMA TUPLE_ELEMENTS | EXPRESSION | EXPRESSION COMMA | EXPRESSION COMMA TUPLE_ELEMENTS | NUM | NUM COMMA | NUM COMMA TUPLE_ELEMENTS | STRING | STRING COMMA | STRING COMMA TUPLE_ELEMENTS

/* Dictionary States and Declaration */
SET_DECLARATION -> CURLY_OPEN SET_ELEMENTS CURLY_CLOSE | CURLY_OPEN CURLY_CLOSE
SET_ELEMENTS -> EXPRESSION | EXPRESSION COLON EXPRESSION | EXPRESSION COLON GROUP_DECLARATION | EXPRESSION COMMA SET_ELEMENTS | EXPRESSION COMMA | EXPRESSION COLON EXPRESSION COMMA SET_ELEMENTS | EXPRESSION COLON EXPRESSION COMMA | EXPRESSION COLON GROUP_DECLARATION COMMA SET_ELEMENTS | EXPRESSION COLON GROUP_DECLARATION COMMA

/* Data Types Declaration */
GROUP_DECLARATION -> LIST_DECLARATION | TUPLE_DECLARATION | SET_DECLARATION
STRING -> SINGLE_QUOTE LONG_WORD SINGLE_QUOTE | DOUBLE_QUOTE LONG_WORD DOUBLE_QUOTE | SINGLE_QUOTE SINGLE_QUOTE | DOUBLE_QUOTE DOUBLE_QUOTE
LONG_WORD -> WORD | WORD LONG_WORD
DECLARATION -> WORD EQ EXPRESSION | WORD EQ STRING | WORD EQ GROUP_DECLARATION | DECLARATION EQ EXPRESSION | DECLARATION EQ STRING | DECLARATION EQ GROUP_DECLARATION | OPERATOR | INDEXED_VAR EQ EXPRESSION
DECLARATION_WITH_OP -> WORD ASSIGN_OP EXPRESSION | WORD ASSIGN_OP LIST_DECLARATION | INDEXED_VAR ASSIGN_OP EXPRESSION

/* File Processing */
WITH_STATES -> WITH OPEN REGULAR_OPEN STRING COMMA STRING REGULAR_CLOSE AS WORD COLON ALGO | WITH OPEN REGULAR_OPEN WORD COMMA STRING REGULAR_CLOSE AS WORD COLON ALGO
WRITE_ALGO -> WORD PERIOD WRITE REGULAR_OPEN STRING REGULAR_CLOSE | WORD PERIOD WRITE REGULAR_OPEN EXPRESSION REGULAR_CLOSE | WORD PERIOD WRITE REGULAR_OPEN WORD REGULAR_CLOSE
PARENTHESES_WORD -> SINGLE_QUOTE WORD SINGLE_QUOTE | DOUBLE_QUOTE WORD DOUBLE_QUOTE
ERROR_STATES -> RAISE ERROR REGULAR_OPEN STRING REGULAR_CLOSE

/* Number Types */
FLOAT -> NUM PERIOD NUM
NUMBER_TYPES -> NUM | MINUS NUM | FLOAT | MINUS FLOAT
/* SCIENTIFIC -> NUM E NUM | NUM e NUM */

/* Operators */
ARITHMATIC -> + | - | * | / | % | ** | DIVIDE DIVIDE
LOGICAL -> and | or
COMPARISON -> GREATER_THAN | LESS_THAN | GREATER_THAN EQ | LESS_THAN EQ | EQ EQ | EXCLAMATION EQ
ASSIGN_OP -> PLUS EQ | MINUS EQ | MULTIPLY EQ | DIVIDE EQ | EQ

/* Commenting n Printing */
SENTENCE -> WORD | WORD SENTENCE
COMMENT -> TAG SENTENCE | COMMENT_QUOTATION QUOTATION_COMMENT_SENTENCE COMMENT_QUOTATION
COMMENT_QUOTATION -> SINGLE_QUOTE SINGLE_QUOTE SINGLE_QUOTE | DOUBLE_QUOTE DOUBLE_QUOTE DOUBLE_QUOTE
QUOTATION_COMMENT_SENTENCE -> SENTENCE | SENTENCE QUOTATION_COMMENT_SENTENCE
PRINT_STATES -> PRINT REGULAR_OPEN STRING REGULAR_CLOSE | PRINT REGULAR_OPEN WORD REGULAR_CLOSE | PRINT REGULAR_OPEN EXPRESSION REGULAR_CLOSE | PRINT REGULAR_OPEN REGULAR_CLOSE | PRINT REGULAR_OPEN GROUP_DECLARATION REGULAR_CLOSE


/* Terminal and Non-terminal statement + symbols */
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVIDE -> /
MODULO -> %
POWER -> MULTIPLY MULTIPLY
IF -> if
ELSE -> else
ELIF -> elif
WHILE -> while
FOR -> for
WORD -> word
NUM -> num
INPUT -> input
COLON -> :
COMMA -> ,
PERIOD -> .
SQUARE_OPEN -> [
SQUARE_CLOSE -> ]
REGULAR_OPEN -> (
REGULAR_CLOSE -> )
CURLY_OPEN -> {
CURLY_CLOSE -> }
EQ -> =
GREATER_THAN -> >
LESS_THAN -> <
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
TAG -> #
PRINT -> print
EXCLAMATION -> !
LEN -> len
APPEND -> append
WRITE -> write
RANGE -> range
SELF -> self
IMPORT -> import
FROM -> from
AS -> as
BOOLEAN -> True | False
DEF -> def
NONE -> None
WITH -> with
OPEN -> open
READ -> read
READLINES -> readlines
RETURN -> return
CONTINUE -> continue
BREAK -> break
PASS -> pass
RAISE -> raise
ERROR -> IOERROR | ValueError | ZeroDivisionError | ImportError | NameError | TypeError | Exception
IN -> in
CLASS -> class
IS -> is
NOT -> not